{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import axios from'axios';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();export const useAuth=()=>useContext(AuthContext);// Create a centralized Axios instance\nconst api=axios.create({baseURL:process.env.REACT_APP_API_URL||'http://localhost:5000',timeout:10000});// Add a response interceptor for automatic token refresh\napi.interceptors.response.use(response=>response,async error=>{var _error$response;const originalRequest=error.config;// If 401 and not already retried, try to refresh token\nif(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===401&&!originalRequest._retry){// Prevent infinite retry loops\nif(originalRequest.url.includes('/auth/refresh')){// If refresh token fails, force logout\nlocalStorage.removeItem('token');localStorage.removeItem('refreshToken');localStorage.removeItem('user');window.location.href='/login';return Promise.reject(error);}originalRequest._retry=true;const refreshToken=localStorage.getItem('refreshToken');if(refreshToken){try{// Attempt to refresh the token\nconst refreshResponse=await axios.post('/api/auth/refresh',{refreshToken});const{token:newToken,refreshToken:newRefreshToken}=refreshResponse.data;// Update stored tokens\nlocalStorage.setItem('token',newToken);if(newRefreshToken){localStorage.setItem('refreshToken',newRefreshToken);}// Update the original request with the new token\noriginalRequest.headers.Authorization=\"Bearer \".concat(newToken);// Retry the original request with the new token\nreturn api(originalRequest);}catch(refreshError){// If refresh fails, clear auth and redirect to login\nlocalStorage.removeItem('token');localStorage.removeItem('refreshToken');localStorage.removeItem('user');window.location.href='/login?sessionExpired=true';return Promise.reject(refreshError);}}}// For other errors, just reject\nreturn Promise.reject(error);});// Add request interceptor to always include token\napi.interceptors.request.use(config=>{const token=localStorage.getItem('token');if(token){config.headers.Authorization=\"Bearer \".concat(token);}return config;},error=>{return Promise.reject(error);});export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(()=>{const u=localStorage.getItem('user');try{return u?JSON.parse(u):null;}catch(_unused){return null;}});const[token,setToken]=useState(()=>localStorage.getItem('token'));const[refreshToken,setRefreshToken]=useState(()=>localStorage.getItem('refreshToken'));const[loading,setLoading]=useState(false);useEffect(()=>{if(token)localStorage.setItem('token',token);else localStorage.removeItem('token');},[token]);useEffect(()=>{if(refreshToken)localStorage.setItem('refreshToken',refreshToken);else localStorage.removeItem('refreshToken');},[refreshToken]);useEffect(()=>{if(user)localStorage.setItem('user',JSON.stringify(user));else localStorage.removeItem('user');},[user]);// Listen for token refresh and update context\nuseEffect(()=>{const handler=()=>{const newToken=localStorage.getItem('token');setToken(newToken);};window.addEventListener('tokenRefreshed',handler);return()=>window.removeEventListener('tokenRefreshed',handler);},[]);const login=(user,token,refreshToken)=>{setUser(user);setToken(token);setRefreshToken(refreshToken);};const logout=async()=>{setLoading(true);try{if(token&&refreshToken){await axios.post('/api/auth/logout',{refreshToken},{headers:{Authorization:\"Bearer \".concat(token)}});}}catch(e){console.error('Logout error:',e);}finally{setUser(null);setToken(null);setRefreshToken(null);localStorage.removeItem('token');localStorage.removeItem('refreshToken');localStorage.removeItem('user');setLoading(false);}};const refresh=async()=>{if(!refreshToken)return;try{const res=await axios.post('/api/auth/refresh',{refreshToken});setToken(res.data.token);}catch(e){console.error('Token refresh error:',e);logout();}};// Optionally, auto-refresh token every 10 minutes\nuseEffect(()=>{if(!refreshToken)return;const interval=setInterval(()=>{refresh();},10*60*1000);return()=>clearInterval(interval);},[refreshToken]);return/*#__PURE__*/_jsx(AuthContext.Provider,{value:{user,token,refreshToken,login,logout,refresh,loading},children:children});};// Export the api instance for use in all requests\nexport{api};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axios","jsx","_jsx","AuthContext","useAuth","api","create","baseURL","process","env","REACT_APP_API_URL","timeout","interceptors","response","use","error","_error$response","originalRequest","config","status","_retry","url","includes","localStorage","removeItem","window","location","href","Promise","reject","refreshToken","getItem","refreshResponse","post","token","newToken","newRefreshToken","data","setItem","headers","Authorization","concat","refreshError","request","AuthProvider","_ref","children","user","setUser","u","JSON","parse","_unused","setToken","setRefreshToken","loading","setLoading","stringify","handler","addEventListener","removeEventListener","login","logout","e","console","refresh","res","interval","setInterval","clearInterval","Provider","value"],"sources":["D:/Doc Sign/client/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\n// Create a centralized Axios instance\r\nconst api = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000',\r\n  timeout: 10000,\r\n});\r\n\r\n// Add a response interceptor for automatic token refresh\r\napi.interceptors.response.use(\r\n  response => response,\r\n  async error => {\r\n    const originalRequest = error.config;\r\n    \r\n    // If 401 and not already retried, try to refresh token\r\n    if (error.response?.status === 401 && !originalRequest._retry) {\r\n      // Prevent infinite retry loops\r\n      if (originalRequest.url.includes('/auth/refresh')) {\r\n        // If refresh token fails, force logout\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('refreshToken');\r\n        localStorage.removeItem('user');\r\n        window.location.href = '/login';\r\n        return Promise.reject(error);\r\n      }\r\n\r\n      originalRequest._retry = true;\r\n      const refreshToken = localStorage.getItem('refreshToken');\r\n      \r\n      if (refreshToken) {\r\n        try {\r\n          // Attempt to refresh the token\r\n          const refreshResponse = await axios.post('/api/auth/refresh', { refreshToken });\r\n          const { token: newToken, refreshToken: newRefreshToken } = refreshResponse.data;\r\n          \r\n          // Update stored tokens\r\n          localStorage.setItem('token', newToken);\r\n          if (newRefreshToken) {\r\n            localStorage.setItem('refreshToken', newRefreshToken);\r\n          }\r\n          \r\n          // Update the original request with the new token\r\n          originalRequest.headers.Authorization = `Bearer ${newToken}`;\r\n          \r\n          // Retry the original request with the new token\r\n          return api(originalRequest);\r\n        } catch (refreshError) {\r\n          // If refresh fails, clear auth and redirect to login\r\n          localStorage.removeItem('token');\r\n          localStorage.removeItem('refreshToken');\r\n          localStorage.removeItem('user');\r\n          window.location.href = '/login?sessionExpired=true';\r\n          return Promise.reject(refreshError);\r\n        }\r\n      }\r\n    }\r\n    \r\n    // For other errors, just reject\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Add request interceptor to always include token\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(() => {\r\n    const u = localStorage.getItem('user');\r\n    try {\r\n      return u ? JSON.parse(u) : null;\r\n    } catch {\r\n      return null;\r\n    }\r\n  });\r\n  const [token, setToken] = useState(() => localStorage.getItem('token'));\r\n  const [refreshToken, setRefreshToken] = useState(() => localStorage.getItem('refreshToken'));\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (token) localStorage.setItem('token', token);\r\n    else localStorage.removeItem('token');\r\n  }, [token]);\r\n  useEffect(() => {\r\n    if (refreshToken) localStorage.setItem('refreshToken', refreshToken);\r\n    else localStorage.removeItem('refreshToken');\r\n  }, [refreshToken]);\r\n  useEffect(() => {\r\n    if (user) localStorage.setItem('user', JSON.stringify(user));\r\n    else localStorage.removeItem('user');\r\n  }, [user]);\r\n\r\n  // Listen for token refresh and update context\r\n  useEffect(() => {\r\n    const handler = () => {\r\n      const newToken = localStorage.getItem('token');\r\n      setToken(newToken);\r\n    };\r\n    window.addEventListener('tokenRefreshed', handler);\r\n    return () => window.removeEventListener('tokenRefreshed', handler);\r\n  }, []);\r\n\r\n  const login = (user, token, refreshToken) => {\r\n    setUser(user);\r\n    setToken(token);\r\n    setRefreshToken(refreshToken);\r\n  };\r\n\r\n  const logout = async () => {\r\n    setLoading(true);\r\n    try {\r\n      if (token && refreshToken) {\r\n        await axios.post('/api/auth/logout', { refreshToken }, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        });\r\n      }\r\n    } catch (e) {\r\n      console.error('Logout error:', e);\r\n    } finally {\r\n      setUser(null);\r\n      setToken(null);\r\n      setRefreshToken(null);\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('refreshToken');\r\n      localStorage.removeItem('user');\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const refresh = async () => {\r\n    if (!refreshToken) return;\r\n    try {\r\n      const res = await axios.post('/api/auth/refresh', { refreshToken });\r\n      setToken(res.data.token);\r\n    } catch (e) {\r\n      console.error('Token refresh error:', e);\r\n      logout();\r\n    }\r\n  };\r\n\r\n  // Optionally, auto-refresh token every 10 minutes\r\n  useEffect(() => {\r\n    if (!refreshToken) return;\r\n    const interval = setInterval(() => {\r\n      refresh();\r\n    }, 10 * 60 * 1000);\r\n    return () => clearInterval(interval);\r\n  }, [refreshToken]);\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, token, refreshToken, login, logout, refresh, loading }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n// Export the api instance for use in all requests\r\nexport { api }; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}