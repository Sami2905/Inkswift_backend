{"ast":null,"code":"import { clsx } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\r\n * Combines multiple class names and merges Tailwind CSS classes\r\n * @param {...any} inputs - Class names to be combined\r\n * @returns {string} - Combined and optimized class names\r\n */\nexport function cn(...inputs) {\n  return twMerge(clsx(inputs));\n}\n\n/**\r\n * Formats a date to a readable string\r\n * @param {Date|string} date - Date to format\r\n * @param {Object} options - Intl.DateTimeFormat options\r\n * @returns {string} - Formatted date string\r\n */\nexport function formatDate(date, options = {}) {\n  const defaultOptions = {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n    ...options\n  };\n  return new Date(date).toLocaleDateString(undefined, defaultOptions);\n}\n\n/**\r\n * Formats file size to human readable format\r\n * @param {number} bytes - File size in bytes\r\n * @returns {string} - Formatted file size (e.g., \"1.2 MB\")\r\n */\nexport function formatFileSize(bytes) {\n  if (bytes === 0) return '0 Bytes';\n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return `${parseFloat((bytes / Math.pow(k, i)).toFixed(2))} ${sizes[i]}`;\n}\n\n/**\r\n * Truncates text to a specified length\r\n * @param {string} text - Text to truncate\r\n * @param {number} length - Maximum length\r\n * @returns {string} - Truncated text with ellipsis if needed\r\n */\nexport function truncate(text, length = 50) {\n  if (text.length <= length) return text;\n  return `${text.substring(0, length)}...`;\n}\n\n/**\r\n * Generates a unique ID\r\n * @returns {string} - Unique ID\r\n */\nexport function generateId() {\n  return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n}\n\n/**\r\n * Copies text to clipboard\r\n * @param {string} text - Text to copy\r\n * @returns {Promise<boolean>} - Whether the copy was successful\r\n */\nexport async function copyToClipboard(text) {\n  try {\n    await navigator.clipboard.writeText(text);\n    return true;\n  } catch (err) {\n    console.error('Failed to copy text: ', err);\n    return false;\n  }\n}\n\n/**\r\n * Validates an email address\r\n * @param {string} email - Email to validate\r\n * @returns {boolean} - Whether the email is valid\r\n */\nexport function validateEmail(email) {\n  const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return re.test(String(email).toLowerCase());\n}\n\n/**\r\n * Downloads a file from a URL\r\n * @param {string} url - File URL\r\n * @param {string} filename - Desired filename\r\n */\nexport function downloadFile(url, filename) {\n  const a = document.createElement('a');\n  a.href = url;\n  a.download = filename;\n  document.body.appendChild(a);\n  a.click();\n  document.body.removeChild(a);\n}\n\n/**\r\n * Converts a file to base64\r\n * @param {File} file - File to convert\r\n * @returns {Promise<string>} - Base64 string\r\n */\nexport function fileToBase64(file) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = error => reject(error);\n  });\n}","map":{"version":3,"names":["clsx","twMerge","cn","inputs","formatDate","date","options","defaultOptions","year","month","day","Date","toLocaleDateString","undefined","formatFileSize","bytes","k","sizes","i","Math","floor","log","parseFloat","pow","toFixed","truncate","text","length","substring","generateId","random","toString","copyToClipboard","navigator","clipboard","writeText","err","console","error","validateEmail","email","re","test","String","toLowerCase","downloadFile","url","filename","a","document","createElement","href","download","body","appendChild","click","removeChild","fileToBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror"],"sources":["D:/Doc Sign/client/src/lib/utils.js"],"sourcesContent":["import { clsx } from 'clsx';\r\nimport { twMerge } from 'tailwind-merge';\r\n\r\n/**\r\n * Combines multiple class names and merges Tailwind CSS classes\r\n * @param {...any} inputs - Class names to be combined\r\n * @returns {string} - Combined and optimized class names\r\n */\r\nexport function cn(...inputs) {\r\n  return twMerge(clsx(inputs));\r\n}\r\n\r\n/**\r\n * Formats a date to a readable string\r\n * @param {Date|string} date - Date to format\r\n * @param {Object} options - Intl.DateTimeFormat options\r\n * @returns {string} - Formatted date string\r\n */\r\nexport function formatDate(date, options = {}) {\r\n  const defaultOptions = {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    ...options,\r\n  };\r\n  \r\n  return new Date(date).toLocaleDateString(undefined, defaultOptions);\r\n}\r\n\r\n/**\r\n * Formats file size to human readable format\r\n * @param {number} bytes - File size in bytes\r\n * @returns {string} - Formatted file size (e.g., \"1.2 MB\")\r\n */\r\nexport function formatFileSize(bytes) {\r\n  if (bytes === 0) return '0 Bytes';\r\n  \r\n  const k = 1024;\r\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\r\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n  \r\n  return `${parseFloat((bytes / Math.pow(k, i)).toFixed(2))} ${sizes[i]}`;\r\n}\r\n\r\n/**\r\n * Truncates text to a specified length\r\n * @param {string} text - Text to truncate\r\n * @param {number} length - Maximum length\r\n * @returns {string} - Truncated text with ellipsis if needed\r\n */\r\nexport function truncate(text, length = 50) {\r\n  if (text.length <= length) return text;\r\n  return `${text.substring(0, length)}...`;\r\n}\r\n\r\n/**\r\n * Generates a unique ID\r\n * @returns {string} - Unique ID\r\n */\r\nexport function generateId() {\r\n  return Math.random().toString(36).substring(2, 15) + \r\n         Math.random().toString(36).substring(2, 15);\r\n}\r\n\r\n/**\r\n * Copies text to clipboard\r\n * @param {string} text - Text to copy\r\n * @returns {Promise<boolean>} - Whether the copy was successful\r\n */\r\nexport async function copyToClipboard(text) {\r\n  try {\r\n    await navigator.clipboard.writeText(text);\r\n    return true;\r\n  } catch (err) {\r\n    console.error('Failed to copy text: ', err);\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Validates an email address\r\n * @param {string} email - Email to validate\r\n * @returns {boolean} - Whether the email is valid\r\n */\r\nexport function validateEmail(email) {\r\n  const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n  return re.test(String(email).toLowerCase());\r\n}\r\n\r\n/**\r\n * Downloads a file from a URL\r\n * @param {string} url - File URL\r\n * @param {string} filename - Desired filename\r\n */\r\nexport function downloadFile(url, filename) {\r\n  const a = document.createElement('a');\r\n  a.href = url;\r\n  a.download = filename;\r\n  document.body.appendChild(a);\r\n  a.click();\r\n  document.body.removeChild(a);\r\n}\r\n\r\n/**\r\n * Converts a file to base64\r\n * @param {File} file - File to convert\r\n * @returns {Promise<string>} - Base64 string\r\n */\r\nexport function fileToBase64(file) {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => resolve(reader.result);\r\n    reader.onerror = error => reject(error);\r\n  });\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}