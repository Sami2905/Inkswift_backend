{"ast":null,"code":"var _jsxFileName = \"D:\\\\Doc Sign\\\\client\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n\n// Create a centralized Axios instance\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000',\n  timeout: 10000\n});\n\n// Add a response interceptor for automatic token refresh\napi.interceptors.response.use(response => response, async error => {\n  var _error$response;\n  const originalRequest = error.config;\n\n  // If 401 and not already retried, try to refresh token\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n    // Prevent infinite retry loops\n    if (originalRequest.url.includes('/auth/refresh')) {\n      // If refresh token fails, force logout\n      localStorage.removeItem('token');\n      localStorage.removeItem('refreshToken');\n      localStorage.removeItem('user');\n      window.location.href = '/login';\n      return Promise.reject(error);\n    }\n    originalRequest._retry = true;\n    const refreshToken = localStorage.getItem('refreshToken');\n    if (refreshToken) {\n      try {\n        // Attempt to refresh the token\n        const refreshResponse = await axios.post('/api/auth/refresh', {\n          refreshToken\n        });\n        const {\n          token: newToken,\n          refreshToken: newRefreshToken\n        } = refreshResponse.data;\n\n        // Update stored tokens\n        localStorage.setItem('token', newToken);\n        if (newRefreshToken) {\n          localStorage.setItem('refreshToken', newRefreshToken);\n        }\n\n        // Update the original request with the new token\n        originalRequest.headers.Authorization = `Bearer ${newToken}`;\n\n        // Retry the original request with the new token\n        return api(originalRequest);\n      } catch (refreshError) {\n        // If refresh fails, clear auth and redirect to login\n        localStorage.removeItem('token');\n        localStorage.removeItem('refreshToken');\n        localStorage.removeItem('user');\n        window.location.href = '/login?sessionExpired=true';\n        return Promise.reject(refreshError);\n      }\n    }\n  }\n\n  // For other errors, just reject\n  return Promise.reject(error);\n});\n\n// Add request interceptor to always include token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(() => {\n    const u = localStorage.getItem('user');\n    try {\n      return u ? JSON.parse(u) : null;\n    } catch {\n      return null;\n    }\n  });\n  const [token, setToken] = useState(() => localStorage.getItem('token'));\n  const [refreshToken, setRefreshToken] = useState(() => localStorage.getItem('refreshToken'));\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    if (token) localStorage.setItem('token', token);else localStorage.removeItem('token');\n  }, [token]);\n  useEffect(() => {\n    if (refreshToken) localStorage.setItem('refreshToken', refreshToken);else localStorage.removeItem('refreshToken');\n  }, [refreshToken]);\n  useEffect(() => {\n    if (user) localStorage.setItem('user', JSON.stringify(user));else localStorage.removeItem('user');\n  }, [user]);\n\n  // Listen for token refresh and update context\n  useEffect(() => {\n    const handler = () => {\n      const newToken = localStorage.getItem('token');\n      setToken(newToken);\n    };\n    window.addEventListener('tokenRefreshed', handler);\n    return () => window.removeEventListener('tokenRefreshed', handler);\n  }, []);\n  const login = (user, token, refreshToken) => {\n    setUser(user);\n    setToken(token);\n    setRefreshToken(refreshToken);\n  };\n  const logout = async () => {\n    setLoading(true);\n    try {\n      if (token && refreshToken) {\n        await axios.post('/api/auth/logout', {\n          refreshToken\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n      }\n    } catch (e) {\n      console.error('Logout error:', e);\n    } finally {\n      setUser(null);\n      setToken(null);\n      setRefreshToken(null);\n      localStorage.removeItem('token');\n      localStorage.removeItem('refreshToken');\n      localStorage.removeItem('user');\n      setLoading(false);\n    }\n  };\n  const refresh = async () => {\n    if (!refreshToken) return;\n    try {\n      const res = await axios.post('/api/auth/refresh', {\n        refreshToken\n      });\n      setToken(res.data.token);\n    } catch (e) {\n      console.error('Token refresh error:', e);\n      logout();\n    }\n  };\n\n  // Optionally, auto-refresh token every 10 minutes\n  useEffect(() => {\n    if (!refreshToken) return;\n    const interval = setInterval(() => {\n      refresh();\n    }, 10 * 60 * 1000);\n    return () => clearInterval(interval);\n  }, [refreshToken]);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      token,\n      refreshToken,\n      login,\n      logout,\n      refresh,\n      loading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 5\n  }, this);\n};\n\n// Export the api instance for use in all requests\n_s2(AuthProvider, \"DSYTR7EOh3lu0a2xfpIfsj0W7XE=\");\n_c = AuthProvider;\nexport { api };\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axios","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","api","create","baseURL","process","env","REACT_APP_API_URL","timeout","interceptors","response","use","error","_error$response","originalRequest","config","status","_retry","url","includes","localStorage","removeItem","window","location","href","Promise","reject","refreshToken","getItem","refreshResponse","post","token","newToken","newRefreshToken","data","setItem","headers","Authorization","refreshError","request","AuthProvider","children","_s2","user","setUser","u","JSON","parse","setToken","setRefreshToken","loading","setLoading","stringify","handler","addEventListener","removeEventListener","login","logout","e","console","refresh","res","interval","setInterval","clearInterval","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Doc Sign/client/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\n// Create a centralized Axios instance\r\nconst api = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000',\r\n  timeout: 10000,\r\n});\r\n\r\n// Add a response interceptor for automatic token refresh\r\napi.interceptors.response.use(\r\n  response => response,\r\n  async error => {\r\n    const originalRequest = error.config;\r\n    \r\n    // If 401 and not already retried, try to refresh token\r\n    if (error.response?.status === 401 && !originalRequest._retry) {\r\n      // Prevent infinite retry loops\r\n      if (originalRequest.url.includes('/auth/refresh')) {\r\n        // If refresh token fails, force logout\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('refreshToken');\r\n        localStorage.removeItem('user');\r\n        window.location.href = '/login';\r\n        return Promise.reject(error);\r\n      }\r\n\r\n      originalRequest._retry = true;\r\n      const refreshToken = localStorage.getItem('refreshToken');\r\n      \r\n      if (refreshToken) {\r\n        try {\r\n          // Attempt to refresh the token\r\n          const refreshResponse = await axios.post('/api/auth/refresh', { refreshToken });\r\n          const { token: newToken, refreshToken: newRefreshToken } = refreshResponse.data;\r\n          \r\n          // Update stored tokens\r\n          localStorage.setItem('token', newToken);\r\n          if (newRefreshToken) {\r\n            localStorage.setItem('refreshToken', newRefreshToken);\r\n          }\r\n          \r\n          // Update the original request with the new token\r\n          originalRequest.headers.Authorization = `Bearer ${newToken}`;\r\n          \r\n          // Retry the original request with the new token\r\n          return api(originalRequest);\r\n        } catch (refreshError) {\r\n          // If refresh fails, clear auth and redirect to login\r\n          localStorage.removeItem('token');\r\n          localStorage.removeItem('refreshToken');\r\n          localStorage.removeItem('user');\r\n          window.location.href = '/login?sessionExpired=true';\r\n          return Promise.reject(refreshError);\r\n        }\r\n      }\r\n    }\r\n    \r\n    // For other errors, just reject\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Add request interceptor to always include token\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(() => {\r\n    const u = localStorage.getItem('user');\r\n    try {\r\n      return u ? JSON.parse(u) : null;\r\n    } catch {\r\n      return null;\r\n    }\r\n  });\r\n  const [token, setToken] = useState(() => localStorage.getItem('token'));\r\n  const [refreshToken, setRefreshToken] = useState(() => localStorage.getItem('refreshToken'));\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (token) localStorage.setItem('token', token);\r\n    else localStorage.removeItem('token');\r\n  }, [token]);\r\n  useEffect(() => {\r\n    if (refreshToken) localStorage.setItem('refreshToken', refreshToken);\r\n    else localStorage.removeItem('refreshToken');\r\n  }, [refreshToken]);\r\n  useEffect(() => {\r\n    if (user) localStorage.setItem('user', JSON.stringify(user));\r\n    else localStorage.removeItem('user');\r\n  }, [user]);\r\n\r\n  // Listen for token refresh and update context\r\n  useEffect(() => {\r\n    const handler = () => {\r\n      const newToken = localStorage.getItem('token');\r\n      setToken(newToken);\r\n    };\r\n    window.addEventListener('tokenRefreshed', handler);\r\n    return () => window.removeEventListener('tokenRefreshed', handler);\r\n  }, []);\r\n\r\n  const login = (user, token, refreshToken) => {\r\n    setUser(user);\r\n    setToken(token);\r\n    setRefreshToken(refreshToken);\r\n  };\r\n\r\n  const logout = async () => {\r\n    setLoading(true);\r\n    try {\r\n      if (token && refreshToken) {\r\n        await axios.post('/api/auth/logout', { refreshToken }, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        });\r\n      }\r\n    } catch (e) {\r\n      console.error('Logout error:', e);\r\n    } finally {\r\n      setUser(null);\r\n      setToken(null);\r\n      setRefreshToken(null);\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('refreshToken');\r\n      localStorage.removeItem('user');\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const refresh = async () => {\r\n    if (!refreshToken) return;\r\n    try {\r\n      const res = await axios.post('/api/auth/refresh', { refreshToken });\r\n      setToken(res.data.token);\r\n    } catch (e) {\r\n      console.error('Token refresh error:', e);\r\n      logout();\r\n    }\r\n  };\r\n\r\n  // Optionally, auto-refresh token every 10 minutes\r\n  useEffect(() => {\r\n    if (!refreshToken) return;\r\n    const interval = setInterval(() => {\r\n      refresh();\r\n    }, 10 * 60 * 1000);\r\n    return () => clearInterval(interval);\r\n  }, [refreshToken]);\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, token, refreshToken, login, logout, refresh, loading }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n// Export the api instance for use in all requests\r\nexport { api }; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}