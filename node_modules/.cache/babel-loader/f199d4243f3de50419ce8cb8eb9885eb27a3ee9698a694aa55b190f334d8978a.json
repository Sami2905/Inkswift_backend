{"ast":null,"code":"/**\r\n * Coordinate transformation utilities for PDF signature placement.\r\n * Supports mapping between CSS (screen) and PDF (points) coordinates.\r\n * PDF origin: bottom-left (0,0). CSS origin: top-left (0,0).\r\n */\n\n/**\r\n * Convert CSS (screen) coordinates to PDF coordinates.\r\n * @param {number} cssX - X in CSS pixels (from left)\r\n * @param {number} cssY - Y in CSS pixels (from top)\r\n * @param {number} pageHeight - PDF page height in points\r\n * @param {number} [scale=1] - Scale factor (screen:PDF)\r\n * @returns {{x: number, y: number}} PDF coordinates (origin bottom-left)\r\n */\nexport function cssToPDF(cssX, cssY, pageHeight, scale = 1) {\n  return {\n    x: cssX / scale,\n    y: pageHeight - cssY / scale\n  };\n}\n\n/**\r\n * Convert PDF coordinates to CSS (screen) coordinates.\r\n * @param {number} pdfX - X in PDF points (from left)\r\n * @param {number} pdfY - Y in PDF points (from bottom)\r\n * @param {number} pageHeight - PDF page height in points\r\n * @param {number} [scale=1] - Scale factor (screen:PDF)\r\n * @returns {{x: number, y: number}} CSS coordinates (origin top-left)\r\n */\nexport function pdfToCSS(pdfX, pdfY, pageHeight, scale = 1) {\n  return {\n    x: pdfX * scale,\n    y: (pageHeight - pdfY) * scale\n  };\n}\n\n/**\r\n * Calculate the bounding box of a signature field.\r\n * @param {object} signature - Signature field object with x, y, width, height\r\n * @returns {{left: number, top: number, right: number, bottom: number}}\r\n */\nexport function calculateBounds(signature) {\n  return {\n    left: signature.x,\n    top: signature.y,\n    right: signature.x + signature.width,\n    bottom: signature.y + signature.height\n  };\n}\n\n/**\r\n * Check if a point is within bounds.\r\n * @param {number} x\r\n * @param {number} y\r\n * @param {object} bounds - {left, top, right, bottom}\r\n * @returns {boolean}\r\n */\nexport function isWithinBounds(x, y, bounds) {\n  return x >= bounds.left && x <= bounds.right && y >= bounds.top && y <= bounds.bottom;\n}","map":{"version":3,"names":["cssToPDF","cssX","cssY","pageHeight","scale","x","y","pdfToCSS","pdfX","pdfY","calculateBounds","signature","left","top","right","width","bottom","height","isWithinBounds","bounds"],"sources":["D:/Doc Sign/client/src/utils/coordinateTransform.js"],"sourcesContent":["/**\r\n * Coordinate transformation utilities for PDF signature placement.\r\n * Supports mapping between CSS (screen) and PDF (points) coordinates.\r\n * PDF origin: bottom-left (0,0). CSS origin: top-left (0,0).\r\n */\r\n\r\n/**\r\n * Convert CSS (screen) coordinates to PDF coordinates.\r\n * @param {number} cssX - X in CSS pixels (from left)\r\n * @param {number} cssY - Y in CSS pixels (from top)\r\n * @param {number} pageHeight - PDF page height in points\r\n * @param {number} [scale=1] - Scale factor (screen:PDF)\r\n * @returns {{x: number, y: number}} PDF coordinates (origin bottom-left)\r\n */\r\nexport function cssToPDF(cssX, cssY, pageHeight, scale = 1) {\r\n  return {\r\n    x: cssX / scale,\r\n    y: (pageHeight - cssY / scale),\r\n  };\r\n}\r\n\r\n/**\r\n * Convert PDF coordinates to CSS (screen) coordinates.\r\n * @param {number} pdfX - X in PDF points (from left)\r\n * @param {number} pdfY - Y in PDF points (from bottom)\r\n * @param {number} pageHeight - PDF page height in points\r\n * @param {number} [scale=1] - Scale factor (screen:PDF)\r\n * @returns {{x: number, y: number}} CSS coordinates (origin top-left)\r\n */\r\nexport function pdfToCSS(pdfX, pdfY, pageHeight, scale = 1) {\r\n  return {\r\n    x: pdfX * scale,\r\n    y: (pageHeight - pdfY) * scale,\r\n  };\r\n}\r\n\r\n/**\r\n * Calculate the bounding box of a signature field.\r\n * @param {object} signature - Signature field object with x, y, width, height\r\n * @returns {{left: number, top: number, right: number, bottom: number}}\r\n */\r\nexport function calculateBounds(signature) {\r\n  return {\r\n    left: signature.x,\r\n    top: signature.y,\r\n    right: signature.x + signature.width,\r\n    bottom: signature.y + signature.height,\r\n  };\r\n}\r\n\r\n/**\r\n * Check if a point is within bounds.\r\n * @param {number} x\r\n * @param {number} y\r\n * @param {object} bounds - {left, top, right, bottom}\r\n * @returns {boolean}\r\n */\r\nexport function isWithinBounds(x, y, bounds) {\r\n  return x >= bounds.left && x <= bounds.right && y >= bounds.top && y <= bounds.bottom;\r\n} "],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,QAAQA,CAACC,IAAI,EAAEC,IAAI,EAAEC,UAAU,EAAEC,KAAK,GAAG,CAAC,EAAE;EAC1D,OAAO;IACLC,CAAC,EAAEJ,IAAI,GAAGG,KAAK;IACfE,CAAC,EAAGH,UAAU,GAAGD,IAAI,GAAGE;EAC1B,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASG,QAAQA,CAACC,IAAI,EAAEC,IAAI,EAAEN,UAAU,EAAEC,KAAK,GAAG,CAAC,EAAE;EAC1D,OAAO;IACLC,CAAC,EAAEG,IAAI,GAAGJ,KAAK;IACfE,CAAC,EAAE,CAACH,UAAU,GAAGM,IAAI,IAAIL;EAC3B,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASM,eAAeA,CAACC,SAAS,EAAE;EACzC,OAAO;IACLC,IAAI,EAAED,SAAS,CAACN,CAAC;IACjBQ,GAAG,EAAEF,SAAS,CAACL,CAAC;IAChBQ,KAAK,EAAEH,SAAS,CAACN,CAAC,GAAGM,SAAS,CAACI,KAAK;IACpCC,MAAM,EAAEL,SAAS,CAACL,CAAC,GAAGK,SAAS,CAACM;EAClC,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,cAAcA,CAACb,CAAC,EAAEC,CAAC,EAAEa,MAAM,EAAE;EAC3C,OAAOd,CAAC,IAAIc,MAAM,CAACP,IAAI,IAAIP,CAAC,IAAIc,MAAM,CAACL,KAAK,IAAIR,CAAC,IAAIa,MAAM,CAACN,GAAG,IAAIP,CAAC,IAAIa,MAAM,CAACH,MAAM;AACvF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}