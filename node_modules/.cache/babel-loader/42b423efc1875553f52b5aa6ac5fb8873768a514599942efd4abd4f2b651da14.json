{"ast":null,"code":"/**\r\n * Coordinate transformation utilities for PDF signature placement.\r\n * Supports mapping between CSS (screen) and PDF (points) coordinates.\r\n * PDF origin: bottom-left (0,0). CSS origin: top-left (0,0).\r\n *//**\r\n * Convert CSS (screen) coordinates to PDF coordinates.\r\n * @param {number} cssX - X in CSS pixels (from left)\r\n * @param {number} cssY - Y in CSS pixels (from top)\r\n * @param {number} pageHeight - PDF page height in points\r\n * @param {number} [scale=1] - Scale factor (screen:PDF)\r\n * @returns {{x: number, y: number}} PDF coordinates (origin bottom-left)\r\n */export function cssToPDF(cssX,cssY,pageHeight){let scale=arguments.length>3&&arguments[3]!==undefined?arguments[3]:1;return{x:cssX/scale,y:pageHeight-cssY/scale};}/**\r\n * Convert PDF coordinates to CSS (screen) coordinates.\r\n * @param {number} pdfX - X in PDF points (from left)\r\n * @param {number} pdfY - Y in PDF points (from bottom)\r\n * @param {number} pageHeight - PDF page height in points\r\n * @param {number} [scale=1] - Scale factor (screen:PDF)\r\n * @returns {{x: number, y: number}} CSS coordinates (origin top-left)\r\n */export function pdfToCSS(pdfX,pdfY,pageHeight){let scale=arguments.length>3&&arguments[3]!==undefined?arguments[3]:1;return{x:pdfX*scale,y:(pageHeight-pdfY)*scale};}/**\r\n * Calculate the bounding box of a signature field.\r\n * @param {object} signature - Signature field object with x, y, width, height\r\n * @returns {{left: number, top: number, right: number, bottom: number}}\r\n */export function calculateBounds(signature){return{left:signature.x,top:signature.y,right:signature.x+signature.width,bottom:signature.y+signature.height};}/**\r\n * Check if a point is within bounds.\r\n * @param {number} x\r\n * @param {number} y\r\n * @param {object} bounds - {left, top, right, bottom}\r\n * @returns {boolean}\r\n */export function isWithinBounds(x,y,bounds){return x>=bounds.left&&x<=bounds.right&&y>=bounds.top&&y<=bounds.bottom;}","map":{"version":3,"names":["cssToPDF","cssX","cssY","pageHeight","scale","arguments","length","undefined","x","y","pdfToCSS","pdfX","pdfY","calculateBounds","signature","left","top","right","width","bottom","height","isWithinBounds","bounds"],"sources":["D:/Doc Sign/client/src/utils/coordinateTransform.js"],"sourcesContent":["/**\r\n * Coordinate transformation utilities for PDF signature placement.\r\n * Supports mapping between CSS (screen) and PDF (points) coordinates.\r\n * PDF origin: bottom-left (0,0). CSS origin: top-left (0,0).\r\n */\r\n\r\n/**\r\n * Convert CSS (screen) coordinates to PDF coordinates.\r\n * @param {number} cssX - X in CSS pixels (from left)\r\n * @param {number} cssY - Y in CSS pixels (from top)\r\n * @param {number} pageHeight - PDF page height in points\r\n * @param {number} [scale=1] - Scale factor (screen:PDF)\r\n * @returns {{x: number, y: number}} PDF coordinates (origin bottom-left)\r\n */\r\nexport function cssToPDF(cssX, cssY, pageHeight, scale = 1) {\r\n  return {\r\n    x: cssX / scale,\r\n    y: (pageHeight - cssY / scale),\r\n  };\r\n}\r\n\r\n/**\r\n * Convert PDF coordinates to CSS (screen) coordinates.\r\n * @param {number} pdfX - X in PDF points (from left)\r\n * @param {number} pdfY - Y in PDF points (from bottom)\r\n * @param {number} pageHeight - PDF page height in points\r\n * @param {number} [scale=1] - Scale factor (screen:PDF)\r\n * @returns {{x: number, y: number}} CSS coordinates (origin top-left)\r\n */\r\nexport function pdfToCSS(pdfX, pdfY, pageHeight, scale = 1) {\r\n  return {\r\n    x: pdfX * scale,\r\n    y: (pageHeight - pdfY) * scale,\r\n  };\r\n}\r\n\r\n/**\r\n * Calculate the bounding box of a signature field.\r\n * @param {object} signature - Signature field object with x, y, width, height\r\n * @returns {{left: number, top: number, right: number, bottom: number}}\r\n */\r\nexport function calculateBounds(signature) {\r\n  return {\r\n    left: signature.x,\r\n    top: signature.y,\r\n    right: signature.x + signature.width,\r\n    bottom: signature.y + signature.height,\r\n  };\r\n}\r\n\r\n/**\r\n * Check if a point is within bounds.\r\n * @param {number} x\r\n * @param {number} y\r\n * @param {object} bounds - {left, top, right, bottom}\r\n * @returns {boolean}\r\n */\r\nexport function isWithinBounds(x, y, bounds) {\r\n  return x >= bounds.left && x <= bounds.right && y >= bounds.top && y <= bounds.bottom;\r\n} "],"mappings":"AAAA;AACA;AACA;AACA;AACA,GAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAA,QAAQA,CAACC,IAAI,CAAEC,IAAI,CAAEC,UAAU,CAAa,IAAX,CAAAC,KAAK,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,CACxD,MAAO,CACLG,CAAC,CAAEP,IAAI,CAAGG,KAAK,CACfK,CAAC,CAAGN,UAAU,CAAGD,IAAI,CAAGE,KAC1B,CAAC,CACH,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAM,QAAQA,CAACC,IAAI,CAAEC,IAAI,CAAET,UAAU,CAAa,IAAX,CAAAC,KAAK,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,CACxD,MAAO,CACLG,CAAC,CAAEG,IAAI,CAAGP,KAAK,CACfK,CAAC,CAAE,CAACN,UAAU,CAAGS,IAAI,EAAIR,KAC3B,CAAC,CACH,CAEA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAS,eAAeA,CAACC,SAAS,CAAE,CACzC,MAAO,CACLC,IAAI,CAAED,SAAS,CAACN,CAAC,CACjBQ,GAAG,CAAEF,SAAS,CAACL,CAAC,CAChBQ,KAAK,CAAEH,SAAS,CAACN,CAAC,CAAGM,SAAS,CAACI,KAAK,CACpCC,MAAM,CAAEL,SAAS,CAACL,CAAC,CAAGK,SAAS,CAACM,MAClC,CAAC,CACH,CAEA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAC,cAAcA,CAACb,CAAC,CAAEC,CAAC,CAAEa,MAAM,CAAE,CAC3C,MAAO,CAAAd,CAAC,EAAIc,MAAM,CAACP,IAAI,EAAIP,CAAC,EAAIc,MAAM,CAACL,KAAK,EAAIR,CAAC,EAAIa,MAAM,CAACN,GAAG,EAAIP,CAAC,EAAIa,MAAM,CAACH,MAAM,CACvF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}