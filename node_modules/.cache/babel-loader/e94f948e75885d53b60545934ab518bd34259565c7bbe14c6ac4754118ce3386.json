{"ast":null,"code":"import _objectSpread from\"D:/Doc Sign/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{clsx}from'clsx';import{twMerge}from'tailwind-merge';/**\r\n * Combines multiple class names and merges Tailwind CSS classes\r\n * @param {...any} inputs - Class names to be combined\r\n * @returns {string} - Combined and optimized class names\r\n */export function cn(){for(var _len=arguments.length,inputs=new Array(_len),_key=0;_key<_len;_key++){inputs[_key]=arguments[_key];}return twMerge(clsx(inputs));}/**\r\n * Formats a date to a readable string\r\n * @param {Date|string} date - Date to format\r\n * @param {Object} options - Intl.DateTimeFormat options\r\n * @returns {string} - Formatted date string\r\n */export function formatDate(date){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const defaultOptions=_objectSpread({year:'numeric',month:'short',day:'numeric'},options);return new Date(date).toLocaleDateString(undefined,defaultOptions);}/**\r\n * Formats file size to human readable format\r\n * @param {number} bytes - File size in bytes\r\n * @returns {string} - Formatted file size (e.g., \"1.2 MB\")\r\n */export function formatFileSize(bytes){if(bytes===0)return'0 Bytes';const k=1024;const sizes=['Bytes','KB','MB','GB'];const i=Math.floor(Math.log(bytes)/Math.log(k));return\"\".concat(parseFloat((bytes/Math.pow(k,i)).toFixed(2)),\" \").concat(sizes[i]);}/**\r\n * Truncates text to a specified length\r\n * @param {string} text - Text to truncate\r\n * @param {number} length - Maximum length\r\n * @returns {string} - Truncated text with ellipsis if needed\r\n */export function truncate(text){let length=arguments.length>1&&arguments[1]!==undefined?arguments[1]:50;if(text.length<=length)return text;return\"\".concat(text.substring(0,length),\"...\");}/**\r\n * Generates a unique ID\r\n * @returns {string} - Unique ID\r\n */export function generateId(){return Math.random().toString(36).substring(2,15)+Math.random().toString(36).substring(2,15);}/**\r\n * Copies text to clipboard\r\n * @param {string} text - Text to copy\r\n * @returns {Promise<boolean>} - Whether the copy was successful\r\n */export async function copyToClipboard(text){try{await navigator.clipboard.writeText(text);return true;}catch(err){console.error('Failed to copy text: ',err);return false;}}/**\r\n * Validates an email address\r\n * @param {string} email - Email to validate\r\n * @returns {boolean} - Whether the email is valid\r\n */export function validateEmail(email){const re=/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;return re.test(String(email).toLowerCase());}/**\r\n * Downloads a file from a URL\r\n * @param {string} url - File URL\r\n * @param {string} filename - Desired filename\r\n */export function downloadFile(url,filename){const a=document.createElement('a');a.href=url;a.download=filename;document.body.appendChild(a);a.click();document.body.removeChild(a);}/**\r\n * Converts a file to base64\r\n * @param {File} file - File to convert\r\n * @returns {Promise<string>} - Base64 string\r\n */export function fileToBase64(file){return new Promise((resolve,reject)=>{const reader=new FileReader();reader.readAsDataURL(file);reader.onload=()=>resolve(reader.result);reader.onerror=error=>reject(error);});}","map":{"version":3,"names":["clsx","twMerge","cn","_len","arguments","length","inputs","Array","_key","formatDate","date","options","undefined","defaultOptions","_objectSpread","year","month","day","Date","toLocaleDateString","formatFileSize","bytes","k","sizes","i","Math","floor","log","concat","parseFloat","pow","toFixed","truncate","text","substring","generateId","random","toString","copyToClipboard","navigator","clipboard","writeText","err","console","error","validateEmail","email","re","test","String","toLowerCase","downloadFile","url","filename","a","document","createElement","href","download","body","appendChild","click","removeChild","fileToBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror"],"sources":["D:/Doc Sign/client/src/lib/utils.js"],"sourcesContent":["import { clsx } from 'clsx';\r\nimport { twMerge } from 'tailwind-merge';\r\n\r\n/**\r\n * Combines multiple class names and merges Tailwind CSS classes\r\n * @param {...any} inputs - Class names to be combined\r\n * @returns {string} - Combined and optimized class names\r\n */\r\nexport function cn(...inputs) {\r\n  return twMerge(clsx(inputs));\r\n}\r\n\r\n/**\r\n * Formats a date to a readable string\r\n * @param {Date|string} date - Date to format\r\n * @param {Object} options - Intl.DateTimeFormat options\r\n * @returns {string} - Formatted date string\r\n */\r\nexport function formatDate(date, options = {}) {\r\n  const defaultOptions = {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    ...options,\r\n  };\r\n  \r\n  return new Date(date).toLocaleDateString(undefined, defaultOptions);\r\n}\r\n\r\n/**\r\n * Formats file size to human readable format\r\n * @param {number} bytes - File size in bytes\r\n * @returns {string} - Formatted file size (e.g., \"1.2 MB\")\r\n */\r\nexport function formatFileSize(bytes) {\r\n  if (bytes === 0) return '0 Bytes';\r\n  \r\n  const k = 1024;\r\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\r\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n  \r\n  return `${parseFloat((bytes / Math.pow(k, i)).toFixed(2))} ${sizes[i]}`;\r\n}\r\n\r\n/**\r\n * Truncates text to a specified length\r\n * @param {string} text - Text to truncate\r\n * @param {number} length - Maximum length\r\n * @returns {string} - Truncated text with ellipsis if needed\r\n */\r\nexport function truncate(text, length = 50) {\r\n  if (text.length <= length) return text;\r\n  return `${text.substring(0, length)}...`;\r\n}\r\n\r\n/**\r\n * Generates a unique ID\r\n * @returns {string} - Unique ID\r\n */\r\nexport function generateId() {\r\n  return Math.random().toString(36).substring(2, 15) + \r\n         Math.random().toString(36).substring(2, 15);\r\n}\r\n\r\n/**\r\n * Copies text to clipboard\r\n * @param {string} text - Text to copy\r\n * @returns {Promise<boolean>} - Whether the copy was successful\r\n */\r\nexport async function copyToClipboard(text) {\r\n  try {\r\n    await navigator.clipboard.writeText(text);\r\n    return true;\r\n  } catch (err) {\r\n    console.error('Failed to copy text: ', err);\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Validates an email address\r\n * @param {string} email - Email to validate\r\n * @returns {boolean} - Whether the email is valid\r\n */\r\nexport function validateEmail(email) {\r\n  const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n  return re.test(String(email).toLowerCase());\r\n}\r\n\r\n/**\r\n * Downloads a file from a URL\r\n * @param {string} url - File URL\r\n * @param {string} filename - Desired filename\r\n */\r\nexport function downloadFile(url, filename) {\r\n  const a = document.createElement('a');\r\n  a.href = url;\r\n  a.download = filename;\r\n  document.body.appendChild(a);\r\n  a.click();\r\n  document.body.removeChild(a);\r\n}\r\n\r\n/**\r\n * Converts a file to base64\r\n * @param {File} file - File to convert\r\n * @returns {Promise<string>} - Base64 string\r\n */\r\nexport function fileToBase64(file) {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => resolve(reader.result);\r\n    reader.onerror = error => reject(error);\r\n  });\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}