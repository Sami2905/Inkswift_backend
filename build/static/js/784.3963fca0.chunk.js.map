{"version":3,"file":"static/js/784.3963fca0.chunk.js","mappings":"sNAIAA,EAAAA,EAAMC,oBAAoBC,UAAS,gCAAAC,OAAmCH,EAAAA,EAAMI,QAAO,4BAuSnF,QArSsBC,KACpB,MAAM,KAAEC,EAAI,MAAEC,IAAUC,EAAAA,EAAAA,OACjBC,EAAaC,IAAkBC,EAAAA,EAAAA,UAAS,CAAC,IACzCC,EAASC,IAAcF,EAAAA,EAAAA,WAAS,IAChCG,EAAWC,IAAgBJ,EAAAA,EAAAA,UAAS,OACpCK,EAAkBC,IAAuBN,EAAAA,EAAAA,WAAS,IAClDO,EAAgBC,IAAqBR,EAAAA,EAAAA,UAAS,KAC9CS,EAASC,GAAcC,EAAAA,SAAe,OACtCC,EAAOC,GAAYF,EAAAA,SAAe,OAClCG,EAAKC,GAAUJ,EAAAA,SAAeK,aAAaC,QAAQ,UAAY,KAC/DC,EAAUC,GAAeR,EAAAA,SAAeG,GAwGzCM,EAAUA,KACd,MAAOR,EAAOC,GAAYF,EAAAA,SAAe,MACzC,OACEU,EAAAA,EAAAA,MAAA,OAAKC,UAAU,yDAAwDC,SAAA,EACrEC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,yBAAwBC,SAAC,4BACvCF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,8BAA6BC,SAAA,EAC1CC,EAAAA,EAAAA,KAACC,EAAAA,EAAQ,CACPC,KAAK,0EACLC,YAAaC,IAASf,EAASe,EAAIC,SAAUC,QAAQlB,MAAM,kBAAmBgB,EAAKA,EAAIG,MAAOH,EAAII,KAAMJ,EAAIK,QAAUV,UAEtHC,EAAAA,EAAAA,KAACU,EAAAA,EAAI,CAACC,WAAY,EAAGC,MAAO,QAE7BxB,IAASS,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAmBC,SAAA,CAAC,UAAQX,YAMvDyB,EAAiBA,KACrB,MAAO5B,EAASC,GAAcC,EAAAA,SAAe,OACtCC,EAAOC,GAAYF,EAAAA,SAAe,OAClCG,EAAKC,GAAUJ,EAAAA,SAAeK,aAAaC,QAAQ,UAAY,KAC/DC,EAAUC,GAAeR,EAAAA,SAAeG,GAyB/C,OAPAH,EAAAA,UAAgB,KACVG,GAjBYwB,WAChBzB,EAAS,MACTH,EAAW,MACX,IACE,MAIM6B,SAJYC,EAAAA,GAAIC,IAAI,8CAA+C,CACvEC,aAAc,OACdC,QAAS,CAAEC,cAAc,UAADpD,OAAYI,OAErBiD,KACjBnC,EAAWoC,IAAIC,gBAAgBR,GACjC,CAAE,MAAOX,GACPf,EAASe,EAAIC,SACbC,QAAQlB,MAAM,0BAA2BgB,EAAKA,EAAIG,MAAOH,EAAII,KAAMJ,EAAIK,MACzE,GAISe,CAAUlC,GAEZ,KAAYL,GAASqC,IAAIG,gBAAgBxC,KAE/C,CAACK,KAGFO,EAAAA,EAAAA,MAAA,OAAKC,UAAU,OAAMC,SAAA,EACnBC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,6BAA4BC,SAAC,kCAC3CF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,OAAMC,SAAA,EACnBC,EAAAA,EAAAA,KAAA,SAAO0B,QAAQ,YAAY5B,UAAU,yBAAwBC,SAAC,eAC9DC,EAAAA,EAAAA,KAAA,SACE2B,GAAG,YACHnB,KAAK,MACLoB,KAAK,OACLC,MAAOnC,EACPoC,SAAUC,GAAKpC,EAAYoC,EAAEC,OAAOH,OACpCI,YAAY,uBACZnC,UAAU,qCAEZE,EAAAA,EAAAA,KAAA,UACEF,UAAU,sEACVoC,QAASA,IAAM3C,EAAOG,GAAUK,SACjC,2BAEHF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,8BAA6BC,SAAA,CACzCd,IACCe,EAAAA,EAAAA,KAACC,EAAAA,EAAQ,CAACC,KAAMjB,EAASkB,YAAaC,IAASf,EAASe,EAAIC,SAAUC,QAAQlB,MAAM,qBAAsBgB,EAAKA,EAAIG,MAAOH,EAAII,KAAMJ,EAAIK,QAAUV,UAChJC,EAAAA,EAAAA,KAACU,EAAAA,EAAI,CAACC,WAAY,EAAGC,MAAO,QAG/BxB,IAASS,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAmBC,SAAA,CAAC,UAAQX,YAM7D,OACES,EAAAA,EAAAA,MAAA,OAAKC,UAAU,YAAWC,SAAA,EAExBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oCAAmCC,SAAA,EAChDC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,6BAA4BC,SAAC,iBAE3CC,EAAAA,EAAAA,KAAA,UACEkC,QA3LSpB,UACfpC,GAAW,GACX,MAAMyD,EAAU,CAAC,EAGjB,IACEA,EAAQC,KAAO,CACbjE,OAAQA,EACRC,QAASA,EACTiE,OAAQ,OAEZ,CAAE,MAAOjD,GACP+C,EAAQC,KAAO,CACbhD,MAAOA,EAAMiB,QACbgC,OAAQ,OAEZ,CAGA,IACE,MAAMC,QAAkBtB,EAAAA,GAAIC,IAAI,eAChCkB,EAAQI,OAAS,CACfF,OAAQC,EAAUjB,KAAKgB,OACvBG,IAAKF,EAAUjB,KAAKmB,IACpBH,OAAQ,OAEZ,CAAE,MAAOjD,GACP+C,EAAQI,OAAS,CACfnD,MAAOA,EAAMiB,QACbgC,OAAQ,OAEZ,CAGA,IAAK,IAADI,EACF,MAAMC,QAAgB1B,EAAAA,GAAIC,IAAI,aAC9BkB,EAAQQ,UAAY,CAClBC,OAA6B,QAAtBH,EAAAC,EAAQrB,KAAKsB,iBAAS,IAAAF,OAAA,EAAtBA,EAAwBI,SAAU,EACzCC,WAAYJ,EAAQrB,KAAKyB,WACzBT,OAAQ,OAEZ,CAAE,MAAOjD,GACP+C,EAAQQ,UAAY,CAClBvD,MAAOA,EAAMiB,QACbgC,OAAQ,OAEZ,CAGA,IACE,MAAMU,EAAcvD,aAAaC,QAAQ,SACnCuD,EAAaxD,aAAaC,QAAQ,QACxC0C,EAAQc,QAAU,CAChB7E,QAAS2E,EACT5E,OAAQ6E,EACRX,OAAQ,OAEZ,CAAE,MAAOjD,GACP+C,EAAQc,QAAU,CAChB7D,MAAOA,EAAMiB,QACbgC,OAAQ,OAEZ,CAEA9D,EAAe4D,GACfzD,GAAW,GACXwE,EAAAA,GAAMC,QAAQ,qBA0HRC,SAAU3E,EACVqB,UAAU,sFAAqFC,SAE9FtB,EAAU,mBAAqB,eAGlCuB,EAAAA,EAAAA,KAAA,UACEF,UAAU,yIACVoC,QA/HqBpB,UAC3BhC,GAAoB,GACpBE,EAAkB,IAClBJ,EAAa,MACb,IAEE,MAAMyE,EAAYC,OAAO,4CAA6C,IACtE,IAAKD,EAGH,OAFArE,EAAkB,iCAClBF,GAAoB,GAGtB,MAAMyE,QAAYC,MAAM,aAADxF,OAAcqF,EAAS,aAAa,CACzDI,OAAQ,QAEJC,EAAcH,EAAIpC,QAAQF,IAAI,gBAC9B0C,EAAgBJ,EAAIpC,QAAQF,IAAI,kBACtCrC,EAAa,CACXgF,GAAIL,EAAIK,GACRvB,OAAQkB,EAAIlB,OACZqB,cACAC,kBAEGJ,EAAIK,IACP5E,EAAkB,QAADhB,OAASuF,EAAIlB,OAAM,MAAArE,OAAKuF,EAAIM,YAEjD,CAAE,MAAOzD,GACPpB,EAAkBoB,EAAIC,SAAW,2BACnC,CAAC,QACCvB,GAAoB,EACtB,GAkGMsE,SAAUvE,EAAiBkB,SAE1BlB,EAAmB,kBAAoB,qBAGzCF,IACCkB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,qCAAoCC,SAAA,EACjDF,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EAAKC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,YAAW,IAAEpB,EAAUiF,GAAK,YAAS,eAAU,UAAQjF,EAAU0D,OAAO,QAChFxC,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EAAKC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,kBAAiB,IAAEpB,EAAU+E,gBACrC7D,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EAAKC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,oBAAmB,IAAEpB,EAAUgF,eAAiB,YAI3D5E,IACCiB,EAAAA,EAAAA,KAAA,OAAKF,UAAU,oEAAmEC,SAAEhB,KAGtFiB,EAAAA,EAAAA,KAAA,OAAKF,UAAU,YAAWC,SACvB+D,OAAOC,QAAQzF,GAAa0F,IAAIC,IAAA,IAAEC,EAAUC,GAAOF,EAAA,OAClDpE,EAAAA,EAAAA,MAAA,OAAoBC,UAAU,qBAAoBC,SAAA,EAChDC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,yBAAwBC,SAAEmE,KACxCrE,EAAAA,EAAAA,MAAA,OAAKC,UAAS,WAAA9B,OAA+B,SAAlBmG,EAAO9B,OAAoB,iBAAmB,gBAAiBtC,SAAA,CAAC,WAChFoE,EAAO9B,UAEjB8B,EAAO/E,QACNS,EAAAA,EAAAA,MAAA,OAAKC,UAAU,4BAA2BC,SAAA,CAAC,UAAQoE,EAAO/E,SAEzC,SAAlB+E,EAAO9B,SACNrC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,6BAA4BC,SACxC+D,OAAOC,QAAQI,GAAQC,OAAOC,IAAA,IAAEC,GAAID,EAAA,MAAa,WAARC,IAAkBN,IAAIO,IAAA,IAAED,EAAKzC,GAAM0C,EAAA,OAC3E1E,EAAAA,EAAAA,MAAA,OAAAE,SAAA,CAAgBuE,EAAI,KAAGE,KAAKC,UAAU5C,KAA5ByC,SAXRJ,QAmBdrE,EAAAA,EAAAA,MAAA,OAAKC,UAAU,8BAA6BC,SAAA,EAC1CC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,mBAAkBC,SAAC,oBACjCF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAmBC,SAAA,EAChCF,EAAAA,EAAAA,MAAA,OAAAE,SAAA,CAAK,SAAO5B,EAAI,GAAAH,OAAMG,EAAKuG,UAAS,KAAA1G,OAAIG,EAAKwG,UAAa,oBAC1D9E,EAAAA,EAAAA,MAAA,OAAAE,SAAA,CAAK,UAAQ3B,EAAQ,UAAY,cACjCyB,EAAAA,EAAAA,MAAA,OAAAE,SAAA,CAAK,aAAWiB,EAAAA,GAAI4D,SAASC,qBAMnChF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oCAAmCC,SAAA,EAChDC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,6BAA4BC,SAAC,4BAC3CC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,8BAA6BC,UAC1CC,EAAAA,EAAAA,KAACC,EAAAA,EAAQ,CACPC,KAAK,0EACLC,YAAaC,IAASE,QAAQlB,MAAM,kBAAmBgB,IAAQL,UAE/DC,EAAAA,EAAAA,KAACU,EAAAA,EAAI,CAACC,WAAY,EAAGC,MAAO,cAKlCZ,EAAAA,EAAAA,KAACJ,EAAO,KACRI,EAAAA,EAAAA,KAACa,EAAc,O,sGCrRrB,SAASiE,EAAE/C,GAAG,IAAIgD,EAAEC,EAAEC,EAAE,GAAG,GAAG,iBAAiBlD,GAAG,iBAAiBA,EAAEkD,GAAGlD,OAAO,GAAG,iBAAiBA,EAAE,GAAGmD,MAAMC,QAAQpD,GAAG,CAAC,IAAIqD,EAAErD,EAAEc,OAAO,IAAIkC,EAAE,EAAEA,EAAEK,EAAEL,IAAIhD,EAAEgD,KAAKC,EAAEF,EAAE/C,EAAEgD,OAAOE,IAAIA,GAAG,KAAKA,GAAGD,EAAE,MAAM,IAAIA,KAAKjD,EAAEA,EAAEiD,KAAKC,IAAIA,GAAG,KAAKA,GAAGD,GAAG,OAAOC,CAAC,CAAQ,SAASI,IAAO,IAAI,IAAItD,EAAEgD,EAAEC,EAAE,EAAEC,EAAE,GAAGG,EAAEE,UAAUzC,OAAOmC,EAAEI,EAAEJ,KAAKjD,EAAEuD,UAAUN,MAAMD,EAAED,EAAE/C,MAAMkD,IAAIA,GAAG,KAAKA,GAAGF,GAAG,OAAOE,CAAC,C,yBAAC,S","sources":["components/TestComponent.js","../node_modules/clsx/dist/clsx.mjs"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useAuth, api } from '../context/AuthContext';\r\nimport toast from 'react-hot-toast';\r\nimport { Document, Page, pdfjs } from 'react-pdf';\r\npdfjs.GlobalWorkerOptions.workerSrc = `https://unpkg.com/pdfjs-dist@${pdfjs.version}/build/pdf.worker.min.js`;\r\n\r\nconst TestComponent = () => {\r\n  const { user, token } = useAuth();\r\n  const [testResults, setTestResults] = useState({});\r\n  const [loading, setLoading] = useState(false);\r\n  const [pdfHealth, setPdfHealth] = useState(null);\r\n  const [pdfHealthLoading, setPdfHealthLoading] = useState(false);\r\n  const [pdfHealthError, setPdfHealthError] = useState('');\r\n  const [blobUrl, setBlobUrl] = React.useState(null);\r\n  const [error, setError] = React.useState(null);\r\n  const [jwt, setJwt] = React.useState(localStorage.getItem('token') || '');\r\n  const [inputJwt, setInputJwt] = React.useState(jwt);\r\n\r\n  const runTests = async () => {\r\n    setLoading(true);\r\n    const results = {};\r\n\r\n    // Test 1: Authentication\r\n    try {\r\n      results.auth = {\r\n        user: !!user,\r\n        token: !!token,\r\n        status: 'PASS'\r\n      };\r\n    } catch (error) {\r\n      results.auth = {\r\n        error: error.message,\r\n        status: 'FAIL'\r\n      };\r\n    }\r\n\r\n    // Test 2: API Health Check\r\n    try {\r\n      const healthRes = await api.get('/api/health');\r\n      results.health = {\r\n        status: healthRes.data.status,\r\n        app: healthRes.data.app,\r\n        status: 'PASS'\r\n      };\r\n    } catch (error) {\r\n      results.health = {\r\n        error: error.message,\r\n        status: 'FAIL'\r\n      };\r\n    }\r\n\r\n    // Test 3: Documents API\r\n    try {\r\n      const docsRes = await api.get('/api/docs');\r\n      results.documents = {\r\n        count: docsRes.data.documents?.length || 0,\r\n        pagination: docsRes.data.pagination,\r\n        status: 'PASS'\r\n      };\r\n    } catch (error) {\r\n      results.documents = {\r\n        error: error.message,\r\n        status: 'FAIL'\r\n      };\r\n    }\r\n\r\n    // Test 4: Local Storage\r\n    try {\r\n      const storedToken = localStorage.getItem('token');\r\n      const storedUser = localStorage.getItem('user');\r\n      results.storage = {\r\n        token: !!storedToken,\r\n        user: !!storedUser,\r\n        status: 'PASS'\r\n      };\r\n    } catch (error) {\r\n      results.storage = {\r\n        error: error.message,\r\n        status: 'FAIL'\r\n      };\r\n    }\r\n\r\n    setTestResults(results);\r\n    setLoading(false);\r\n    toast.success('Tests completed!');\r\n  };\r\n\r\n  const handlePDFHealthCheck = async () => {\r\n    setPdfHealthLoading(true);\r\n    setPdfHealthError('');\r\n    setPdfHealth(null);\r\n    try {\r\n      // Use a known document ID or prompt user for one\r\n      const testDocId = prompt('Enter a Document ID to test PDF endpoint:', '');\r\n      if (!testDocId) {\r\n        setPdfHealthError('No document ID provided.');\r\n        setPdfHealthLoading(false);\r\n        return;\r\n      }\r\n      const res = await fetch(`/api/docs/${testDocId}/download`, {\r\n        method: 'GET',\r\n      });\r\n      const contentType = res.headers.get('content-type');\r\n      const contentLength = res.headers.get('content-length');\r\n      setPdfHealth({\r\n        ok: res.ok,\r\n        status: res.status,\r\n        contentType,\r\n        contentLength,\r\n      });\r\n      if (!res.ok) {\r\n        setPdfHealthError(`HTTP ${res.status}: ${res.statusText}`);\r\n      }\r\n    } catch (err) {\r\n      setPdfHealthError(err.message || 'PDF health check failed.');\r\n    } finally {\r\n      setPdfHealthLoading(false);\r\n    }\r\n  };\r\n\r\n  const TestPDF = () => {\r\n    const [error, setError] = React.useState(null);\r\n    return (\r\n      <div className=\"flex flex-col items-center justify-center min-h-screen\">\r\n        <h2 className=\"text-xl font-bold mb-4\">Test Public PDF Viewer</h2>\r\n        <div className=\"bg-white p-4 rounded shadow\">\r\n          <Document \r\n            file=\"https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf\"\r\n            onLoadError={err => { setError(err.message); console.error('Test PDF error:', err, err.stack, err.name, err.cause); }}\r\n          >\r\n            <Page pageNumber={1} width={600} />\r\n          </Document>\r\n          {error && <div className=\"text-red-500 mt-2\">Error: {error}</div>}\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const BackendPDFTest = () => {\r\n    const [blobUrl, setBlobUrl] = React.useState(null);\r\n    const [error, setError] = React.useState(null);\r\n    const [jwt, setJwt] = React.useState(localStorage.getItem('token') || '');\r\n    const [inputJwt, setInputJwt] = React.useState(jwt);\r\n\r\n    const fetchBlob = async (token) => {\r\n      setError(null);\r\n      setBlobUrl(null);\r\n      try {\r\n        const res = await api.get('/api/docs/6860f7e1bdfe754adbf56eb5/download', {\r\n          responseType: 'blob',\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        });\r\n        const blob = res.data;\r\n        setBlobUrl(URL.createObjectURL(blob));\r\n      } catch (err) {\r\n        setError(err.message);\r\n        console.error('Backend PDF test error:', err, err.stack, err.name, err.cause);\r\n      }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n      if (jwt) fetchBlob(jwt);\r\n      // Clean up blob URL on unmount\r\n      return () => { if (blobUrl) URL.revokeObjectURL(blobUrl); };\r\n      // eslint-disable-next-line\r\n    }, [jwt]);\r\n\r\n    return (\r\n      <div className=\"mt-8\">\r\n        <h2 className=\"text-xl font-semibold mb-4\">Test Backend PDF Blob Viewer</h2>\r\n        <div className=\"mb-2\">\r\n          <label htmlFor=\"jwt-input\" className=\"block mb-1 font-medium\">JWT Token</label>\r\n          <input\r\n            id=\"jwt-input\"\r\n            name=\"jwt\"\r\n            type=\"text\"\r\n            value={inputJwt}\r\n            onChange={e => setInputJwt(e.target.value)}\r\n            placeholder=\"Paste JWT token here\"\r\n            className=\"w-full px-2 py-1 border rounded\"\r\n          />\r\n          <button\r\n            className=\"mt-2 px-4 py-1 bg-indigo-600 text-white rounded hover:bg-indigo-700\"\r\n            onClick={() => setJwt(inputJwt)}\r\n          >Test with this JWT</button>\r\n        </div>\r\n        <div className=\"bg-white p-4 rounded shadow\">\r\n          {blobUrl && (\r\n            <Document file={blobUrl} onLoadError={err => { setError(err.message); console.error('Backend PDF error:', err, err.stack, err.name, err.cause); }}>\r\n              <Page pageNumber={1} width={600} />\r\n            </Document>\r\n          )}\r\n          {error && <div className=\"text-red-500 mt-2\">Error: {error}</div>}\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* System Tests */}\r\n      <div className=\"p-6 bg-white rounded-lg shadow-md\">\r\n        <h2 className=\"text-xl font-semibold mb-4\">System Test</h2>\r\n        \r\n        <button\r\n          onClick={runTests}\r\n          disabled={loading}\r\n          className=\"mb-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 disabled:opacity-50\"\r\n        >\r\n          {loading ? 'Running Tests...' : 'Run Tests'}\r\n        </button>\r\n\r\n        <button\r\n          className=\"mb-4 ml-4 px-4 py-2 bg-sky-600 text-white rounded-xl font-semibold hover:bg-sky-700 focus:outline-none focus:ring-2 focus:ring-sky-400\"\r\n          onClick={handlePDFHealthCheck}\r\n          disabled={pdfHealthLoading}\r\n        >\r\n          {pdfHealthLoading ? 'Checking PDF...' : 'PDF Health Check'}\r\n        </button>\r\n\r\n        {pdfHealth && (\r\n          <div className=\"mt-2 p-4 bg-gray-50 border rounded\">\r\n            <div><b>Status:</b> {pdfHealth.ok ? '✅ OK' : '❌ Error'} (HTTP {pdfHealth.status})</div>\r\n            <div><b>Content-Type:</b> {pdfHealth.contentType}</div>\r\n            <div><b>Content-Length:</b> {pdfHealth.contentLength || 'N/A'}</div>\r\n          </div>\r\n        )}\r\n\r\n        {pdfHealthError && (\r\n          <div className=\"mt-2 p-2 bg-rose-100 text-rose-700 border border-rose-300 rounded\">{pdfHealthError}</div>\r\n        )}\r\n\r\n        <div className=\"space-y-4\">\r\n          {Object.entries(testResults).map(([testName, result]) => (\r\n            <div key={testName} className=\"border rounded p-3\">\r\n              <h3 className=\"font-medium capitalize\">{testName}</h3>\r\n              <div className={`text-sm ${result.status === 'PASS' ? 'text-green-600' : 'text-red-600'}`}>\r\n                Status: {result.status}\r\n              </div>\r\n              {result.error && (\r\n                <div className=\"text-red-500 text-sm mt-1\">Error: {result.error}</div>\r\n              )}\r\n              {result.status === 'PASS' && (\r\n                <div className=\"text-gray-600 text-sm mt-1\">\r\n                  {Object.entries(result).filter(([key]) => key !== 'status').map(([key, value]) => (\r\n                    <div key={key}>{key}: {JSON.stringify(value)}</div>\r\n                  ))}\r\n                </div>\r\n              )}\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n        <div className=\"mt-4 p-3 bg-gray-50 rounded\">\r\n          <h3 className=\"font-medium mb-2\">Current State:</h3>\r\n          <div className=\"text-sm space-y-1\">\r\n            <div>User: {user ? `${user.firstName} ${user.lastName}` : 'Not logged in'}</div>\r\n            <div>Token: {token ? 'Present' : 'Missing'}</div>\r\n            <div>API Base: {api.defaults.baseURL}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Test PDF Viewer */}\r\n      <div className=\"p-6 bg-white rounded-lg shadow-md\">\r\n        <h2 className=\"text-xl font-semibold mb-4\">Test Public PDF Viewer</h2>\r\n        <div className=\"bg-white p-4 rounded shadow\">\r\n          <Document \r\n            file=\"https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf\"\r\n            onLoadError={err => { console.error('Test PDF error:', err); }}\r\n          >\r\n            <Page pageNumber={1} width={600} />\r\n          </Document>\r\n        </div>\r\n      </div>\r\n\r\n      <TestPDF />\r\n      <BackendPDFTest />\r\n    </div>\r\n  );\r\n};\r\n\r\n// Add accessibility test using axe-core\r\n// Only run in test environment\r\nif (process.env.NODE_ENV === 'test') {\r\n  import('@testing-library/react').then(({ render }) => {\r\n    import('axe-core').then(axe => {\r\n      render(<TestComponent />);\r\n      axe.run(document.body, {}, (err, results) => {\r\n        if (err) throw err;\r\n        if (results.violations.length > 0) {\r\n          // eslint-disable-next-line no-console\r\n          console.error('Accessibility violations:', results.violations);\r\n        }\r\n      });\r\n    });\r\n  });\r\n}\r\n\r\nexport default TestComponent; ","function r(e){var t,f,n=\"\";if(\"string\"==typeof e||\"number\"==typeof e)n+=e;else if(\"object\"==typeof e)if(Array.isArray(e)){var o=e.length;for(t=0;t<o;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=\" \"),n+=f)}else for(f in e)e[f]&&(n&&(n+=\" \"),n+=f);return n}export function clsx(){for(var e,t,f=0,n=\"\",o=arguments.length;f<o;f++)(e=arguments[f])&&(t=r(e))&&(n&&(n+=\" \"),n+=t);return n}export default clsx;"],"names":["pdfjs","GlobalWorkerOptions","workerSrc","concat","version","TestComponent","user","token","useAuth","testResults","setTestResults","useState","loading","setLoading","pdfHealth","setPdfHealth","pdfHealthLoading","setPdfHealthLoading","pdfHealthError","setPdfHealthError","blobUrl","setBlobUrl","React","error","setError","jwt","setJwt","localStorage","getItem","inputJwt","setInputJwt","TestPDF","_jsxs","className","children","_jsx","Document","file","onLoadError","err","message","console","stack","name","cause","Page","pageNumber","width","BackendPDFTest","async","blob","api","get","responseType","headers","Authorization","data","URL","createObjectURL","fetchBlob","revokeObjectURL","htmlFor","id","type","value","onChange","e","target","placeholder","onClick","results","auth","status","healthRes","health","app","_docsRes$data$documen","docsRes","documents","count","length","pagination","storedToken","storedUser","storage","toast","success","disabled","testDocId","prompt","res","fetch","method","contentType","contentLength","ok","statusText","Object","entries","map","_ref","testName","result","filter","_ref2","key","_ref3","JSON","stringify","firstName","lastName","defaults","baseURL","r","t","f","n","Array","isArray","o","clsx","arguments"],"sourceRoot":""}